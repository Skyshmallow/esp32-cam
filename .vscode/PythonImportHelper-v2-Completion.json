[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "wikipedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wikipedia",
        "description": "wikipedia",
        "detail": "wikipedia",
        "documentation": {}
    },
    {
        "label": "pywhatkit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pywhatkit",
        "description": "pywhatkit",
        "detail": "pywhatkit",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "IPv4Address",
        "importPath": "ipaddress",
        "description": "ipaddress",
        "isExtraImport": true,
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def speak(audio):\n    print(f\"{BOTNAME}: {audio}\")\n    engine.say(audio)\n    engine.runAndWait()\n# Wish Me Function\ndef wish_me():\n    hour = int(datetime.datetime.now().hour)\n    if 0 <= hour < 12:\n        speak(f\"Good Morning {USER}!\")\n    elif 12 <= hour < 18:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "wish_me",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def wish_me():\n    hour = int(datetime.datetime.now().hour)\n    if 0 <= hour < 12:\n        speak(f\"Good Morning {USER}!\")\n    elif 12 <= hour < 18:\n        speak(f\"Good Afternoon {USER}!\")\n    else:\n        speak(f\"Good Evening {USER}!\")\n    speak(f\"I am {BOTNAME}. How can I help you?\")\n# Take Command Function",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "take_command",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def take_command():\n    r = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Listening...\")\n        r.pause_threshold = 1\n        audio = r.listen(source)\n    try:\n        print(\"Recognizing...\")\n        query = r.recognize_google(audio, language='en-US')\n        print(f\"{USER}: {query}\\n\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def send_email(to, subject, body):\n    try:\n        server = smtplib.SMTP('smtp.gmail.com', 587)\n        server.starttls()\n        server.login(EMAIL, EMAIL_PASSWORD)\n        message = f\"Subject: {subject}\\n\\n{body}\"\n        server.sendmail(EMAIL, to, message)\n        server.quit()\n        speak(\"Email has been sent successfully!\")\n    except Exception as e:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def calculate(expression):\n    try:\n        result = eval(expression)\n        speak(f\"The answer is {result}\")\n    except Exception as e:\n        speak(\"Sorry, I couldn't calculate that.\")\n        print(e)\n# Open installed apps\ndef open_application(app_name):\n    try:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "open_application",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def open_application(app_name):\n    try:\n        if 'calculator' in app_name:\n            subprocess.Popen('calc.exe')\n            speak(\"Opening Calculator\")\n        elif 'arduino' in app_name:\n            subprocess.Popen(r\"C:\\Users\\Lenovo\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\")\n            speak(\"Opening Arduino IDE\")\n        elif 'steam' in app_name:\n            subprocess.Popen(r\"C:\\Program Files (x86)\\Steam\\Steam.exe\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "take_notes",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def take_notes():\n    speak(\"What would you like to note down?\")\n    note = take_command()\n    if note != \"None\":\n        with open(\"notes.txt\", \"a\") as file:\n            file.write(f\"{datetime.datetime.now()}: {note}\\n\")\n        speak(\"Your note has been saved.\")\n# Set Alarm Function\ndef set_alarm():\n    speak(\"Please tell me the time for the alarm in HH:MM format.\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "set_alarm",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def set_alarm():\n    speak(\"Please tell me the time for the alarm in HH:MM format.\")\n    alarm_time = input(\"Enter the alarm time in HH:MM format: \")  # Take input manually\n    if alarm_time != \"None\":\n        try:\n            alarm_hour, alarm_minute = map(int, alarm_time.split(\":\"))\n            current_time = datetime.datetime.now()\n            alarm_time_obj = current_time.replace(hour=alarm_hour, minute=alarm_minute, second=0, microsecond=0)\n            if alarm_time_obj < current_time:\n                alarm_time_obj += datetime.timedelta(days=1)  # Set alarm for next day",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "website_search",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def website_search(query):\n    if 'anime' in query:\n        speak(\"Opening Anime website.\")\n        webbrowser.open(\"https://jut.su/anime/\")\n    elif 'korean website' in query:\n        speak(\"Opening Dorama website.\")\n        webbrowser.open(\"https://doramy.club/\")\n    elif 'portal' in query:\n        speak(\"Opening SDU Portal.\")\n        webbrowser.open(\"https://my.sdu.edu.kz/index.php\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "newLook_wrapper",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def newLook_wrapper(follow_person, record, show_debug=True):\n    global tracking_active\n    try:\n        # Clear the stop event before starting\n        stop_tracking_event.clear()\n        # Start tracking\n        newLook(follow_person=follow_person, record=record, show_debug=show_debug)\n    except Exception as e:\n        print(f\"Error in newLook wrapper: {e}\")\n        import traceback",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "toggle_person_following",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def toggle_person_following(follow=True, record=True, show_debug=True):\n    global person_tracking_thread, tracking_active\n    # Check if tracking module is available\n    if not tracking_module_available:\n        speak(\"Person tracking functionality is not available. Please make sure newLook.py is in the same directory.\")\n        return\n    try:\n        # If tracking is active, stop it first\n        if tracking_active and person_tracking_thread and person_tracking_thread.is_alive():\n            speak(\"Stopping current tracking session...\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "def main():\n    wish_me()\n    while True:\n        query = take_command()\n        if 'wikipedia' in query:\n            query = query.replace('wikipedia', '').strip()\n            if query == \"\":\n                speak('What should I search on Wikipedia?')\n                query = take_command()\n            if query != \"None\" and query.strip() != \"\":",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "USER",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "USER = os.getenv(\"SIR\") or \"User\"\nBOTNAME = os.getenv(\"BOTNAME\") or \"Assistant\"\nEMAIL = os.getenv(\"EMAIL\")\nEMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\nNEWS_API_KEY = os.getenv(\"NEWS_API_KEY\")\nOPENWEATHER_API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n# Import the newLook module and get access to the stop_tracking_event\n# Use a try-except to handle potential import errors gracefully\ntry:\n    from newLook import newLook, stop_tracking_event",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "BOTNAME",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "BOTNAME = os.getenv(\"BOTNAME\") or \"Assistant\"\nEMAIL = os.getenv(\"EMAIL\")\nEMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\nNEWS_API_KEY = os.getenv(\"NEWS_API_KEY\")\nOPENWEATHER_API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n# Import the newLook module and get access to the stop_tracking_event\n# Use a try-except to handle potential import errors gracefully\ntry:\n    from newLook import newLook, stop_tracking_event\n    tracking_module_available = True",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "EMAIL",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "EMAIL = os.getenv(\"EMAIL\")\nEMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\nNEWS_API_KEY = os.getenv(\"NEWS_API_KEY\")\nOPENWEATHER_API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n# Import the newLook module and get access to the stop_tracking_event\n# Use a try-except to handle potential import errors gracefully\ntry:\n    from newLook import newLook, stop_tracking_event\n    tracking_module_available = True\nexcept ImportError:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "EMAIL_PASSWORD",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "EMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\nNEWS_API_KEY = os.getenv(\"NEWS_API_KEY\")\nOPENWEATHER_API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n# Import the newLook module and get access to the stop_tracking_event\n# Use a try-except to handle potential import errors gracefully\ntry:\n    from newLook import newLook, stop_tracking_event\n    tracking_module_available = True\nexcept ImportError:\n    print(\"Warning: newLook module not found. Person tracking will be disabled.\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "NEWS_API_KEY",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "NEWS_API_KEY = os.getenv(\"NEWS_API_KEY\")\nOPENWEATHER_API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n# Import the newLook module and get access to the stop_tracking_event\n# Use a try-except to handle potential import errors gracefully\ntry:\n    from newLook import newLook, stop_tracking_event\n    tracking_module_available = True\nexcept ImportError:\n    print(\"Warning: newLook module not found. Person tracking will be disabled.\")\n    tracking_module_available = False",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "OPENWEATHER_API_KEY",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "OPENWEATHER_API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n# Import the newLook module and get access to the stop_tracking_event\n# Use a try-except to handle potential import errors gracefully\ntry:\n    from newLook import newLook, stop_tracking_event\n    tracking_module_available = True\nexcept ImportError:\n    print(\"Warning: newLook module not found. Person tracking will be disabled.\")\n    tracking_module_available = False\n    # Create a dummy event object if the module is not available",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "person_tracking_thread",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "person_tracking_thread = None\ntracking_active = False\n# Initialize Text-to-Speech Engine\nengine = pyttsx3.init()\nvoices = engine.getProperty('voices')\nengine.setProperty('voice', voices[1].id)  # Female voice\n# Speak Function\ndef speak(audio):\n    print(f\"{BOTNAME}: {audio}\")\n    engine.say(audio)",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "tracking_active",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "tracking_active = False\n# Initialize Text-to-Speech Engine\nengine = pyttsx3.init()\nvoices = engine.getProperty('voices')\nengine.setProperty('voice', voices[1].id)  # Female voice\n# Speak Function\ndef speak(audio):\n    print(f\"{BOTNAME}: {audio}\")\n    engine.say(audio)\n    engine.runAndWait()",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "engine = pyttsx3.init()\nvoices = engine.getProperty('voices')\nengine.setProperty('voice', voices[1].id)  # Female voice\n# Speak Function\ndef speak(audio):\n    print(f\"{BOTNAME}: {audio}\")\n    engine.say(audio)\n    engine.runAndWait()\n# Wish Me Function\ndef wish_me():",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "voices",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "peekOfCode": "voices = engine.getProperty('voices')\nengine.setProperty('voice', voices[1].id)  # Female voice\n# Speak Function\ndef speak(audio):\n    print(f\"{BOTNAME}: {audio}\")\n    engine.say(audio)\n    engine.runAndWait()\n# Wish Me Function\ndef wish_me():\n    hour = int(datetime.datetime.now().hour)",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.new gpt",
        "documentation": {}
    },
    {
        "label": "MjpegStreamReader",
        "kind": 6,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "class MjpegStreamReader:\n    def __init__(self, url):\n        self.url = url\n        self.frame = None\n        self.stopped = False\n        self.thread = None\n        self.last_frame_time = 0\n    def start(self):\n        \"\"\"Start the MJPEG stream reader thread\"\"\"\n        print(f\"Starting MJPEG stream reader for {self.url}\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "HeadTrackingCamera",
        "kind": 6,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "class HeadTrackingCamera:\n    def __init__(self, follow_person=True, record=False):\n        # Track and record settings\n        self.follow_person = follow_person\n        self.record = record\n        # Video recording properties\n        self.video_writer = None\n        self.recording_started = False\n        self.recording_path = \"\"\n        self.fps = 20  # Target frames per second for recording",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "newLook",
        "kind": 2,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "def newLook(follow_person=True, record=False, show_debug=True):\n    \"\"\"Main function to start the ESP32-CAM head tracking and/or recording\"\"\"\n    global stop_tracking_event\n    # Reset the stop event at the beginning of the function\n    stop_tracking_event.clear()\n    try:\n        print(\"ESP32-CAM Camera System\")\n        print(f\"Video stream: {VIDEO_STREAM_URL}\")\n        print(f\"Camera control: {CAMERA_CONTROL_URL}\")\n        if show_debug:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "CAMERA_IP",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "CAMERA_IP = \"192.168.143.186\"\nCAMERA_CONTROL_URL = f\"http://{CAMERA_IP}/action\"\nVIDEO_STREAM_URL = f\"http://{CAMERA_IP}:81/stream\"\n# Movement parameters\nMOVE_COOLDOWN = 0.12  # Seconds between camera movements (reduced from 0.5)\nCENTER_THRESHOLD = 0.1  # Distance from center before moving camera (reduced from 0.15)\nMOVEMENT_SMOOTHING = 2  # Number of frames to consider for smoothing movement\n# Global stop event to allow external termination\nstop_tracking_event = threading.Event()\nclass MjpegStreamReader:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "CAMERA_CONTROL_URL",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "CAMERA_CONTROL_URL = f\"http://{CAMERA_IP}/action\"\nVIDEO_STREAM_URL = f\"http://{CAMERA_IP}:81/stream\"\n# Movement parameters\nMOVE_COOLDOWN = 0.12  # Seconds between camera movements (reduced from 0.5)\nCENTER_THRESHOLD = 0.1  # Distance from center before moving camera (reduced from 0.15)\nMOVEMENT_SMOOTHING = 2  # Number of frames to consider for smoothing movement\n# Global stop event to allow external termination\nstop_tracking_event = threading.Event()\nclass MjpegStreamReader:\n    def __init__(self, url):",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "VIDEO_STREAM_URL",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "VIDEO_STREAM_URL = f\"http://{CAMERA_IP}:81/stream\"\n# Movement parameters\nMOVE_COOLDOWN = 0.12  # Seconds between camera movements (reduced from 0.5)\nCENTER_THRESHOLD = 0.1  # Distance from center before moving camera (reduced from 0.15)\nMOVEMENT_SMOOTHING = 2  # Number of frames to consider for smoothing movement\n# Global stop event to allow external termination\nstop_tracking_event = threading.Event()\nclass MjpegStreamReader:\n    def __init__(self, url):\n        self.url = url",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "MOVE_COOLDOWN",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "MOVE_COOLDOWN = 0.12  # Seconds between camera movements (reduced from 0.5)\nCENTER_THRESHOLD = 0.1  # Distance from center before moving camera (reduced from 0.15)\nMOVEMENT_SMOOTHING = 2  # Number of frames to consider for smoothing movement\n# Global stop event to allow external termination\nstop_tracking_event = threading.Event()\nclass MjpegStreamReader:\n    def __init__(self, url):\n        self.url = url\n        self.frame = None\n        self.stopped = False",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "CENTER_THRESHOLD",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "CENTER_THRESHOLD = 0.1  # Distance from center before moving camera (reduced from 0.15)\nMOVEMENT_SMOOTHING = 2  # Number of frames to consider for smoothing movement\n# Global stop event to allow external termination\nstop_tracking_event = threading.Event()\nclass MjpegStreamReader:\n    def __init__(self, url):\n        self.url = url\n        self.frame = None\n        self.stopped = False\n        self.thread = None",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "MOVEMENT_SMOOTHING",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "MOVEMENT_SMOOTHING = 2  # Number of frames to consider for smoothing movement\n# Global stop event to allow external termination\nstop_tracking_event = threading.Event()\nclass MjpegStreamReader:\n    def __init__(self, url):\n        self.url = url\n        self.frame = None\n        self.stopped = False\n        self.thread = None\n        self.last_frame_time = 0",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "stop_tracking_event",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "peekOfCode": "stop_tracking_event = threading.Event()\nclass MjpegStreamReader:\n    def __init__(self, url):\n        self.url = url\n        self.frame = None\n        self.stopped = False\n        self.thread = None\n        self.last_frame_time = 0\n    def start(self):\n        \"\"\"Start the MJPEG stream reader thread\"\"\"",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.newLook",
        "documentation": {}
    },
    {
        "label": "start_ip",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.scanner",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.scanner",
        "peekOfCode": "start_ip = IPv4Address(\"192.168.1.186\")\nend_ip = IPv4Address(\"192.168.255.186\")\nfor ip_int in range(int(start_ip), int(end_ip) + 1, 256):  # шаг в 256, чтобы менять только второй байт\n    for last in range(186, 187):  # только 186-й адрес (как ты указал)\n        ip = IPv4Address(ip_int + last - 186)\n        url = f\"http://{ip}/\"\n        try:\n            r = requests.get(url, timeout=1)\n            print(f\"[+] Found site: {url} — Status: {r.status_code}\")\n        except requests.RequestException:",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.scanner",
        "documentation": {}
    },
    {
        "label": "end_ip",
        "kind": 5,
        "importPath": "Smart ESP32-CAM Surveillance System.AUTOMATIC.scanner",
        "description": "Smart ESP32-CAM Surveillance System.AUTOMATIC.scanner",
        "peekOfCode": "end_ip = IPv4Address(\"192.168.255.186\")\nfor ip_int in range(int(start_ip), int(end_ip) + 1, 256):  # шаг в 256, чтобы менять только второй байт\n    for last in range(186, 187):  # только 186-й адрес (как ты указал)\n        ip = IPv4Address(ip_int + last - 186)\n        url = f\"http://{ip}/\"\n        try:\n            r = requests.get(url, timeout=1)\n            print(f\"[+] Found site: {url} — Status: {r.status_code}\")\n        except requests.RequestException:\n            print(f\"[-] No response from: {url}\")",
        "detail": "Smart ESP32-CAM Surveillance System.AUTOMATIC.scanner",
        "documentation": {}
    }
]